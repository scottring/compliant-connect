App purpose: A multi-tenant web-based platform that streamlines the process of collecting, managing, and tracking product compliance information between companies and their suppliers.

![CleanShot 2025-03-19 at 12.53.47.png](attachment:e070d2e1-20ba-4d1e-a969-d433efb88ec2:CleanShot_2025-03-19_at_12.53.47.png)

![image.png](attachment:97a38c60-271b-4f31-aa28-318ed4d1e872:image.png)

We start with a question bank, which includes all the questions that could be asked for a given industry. So for example, the chemicals industry would have all the questions that chemicals industry suppliers need to report to their customers and to authorities. And each of those questions is tagged with one or more tags. So in this instance, the blue could be REACH, the red could be US EPA, etc. And when a manufacturer or a regulatory body or anyone wants to send a request for information about a given chemical product, they select the tag that contains the questions that they need to ask. So if they need to ask questions for reach, they'd select the blue tag in this case. And then they send that to the supplier company, who is notified via email that there is a product sheet request by [requesting company name] for [supplier company’s product name]. The supplier then fills out those filtered questions, those tagged questions. And when it's finished filling them out, it submits them back to the organization that sent the request in the first place, who receives an email notification indicating that there is a product sheet ready for review. And that organization then reviews it by flagging problematic answers and entering comments. And then resubmits it back to the supplier (who receives email notification) and then comments on those flags and either changes the answer or disagrees with the change. And this iterative review process goes back and forth until the requesting organization has approved all of the answers, at which point it's incorporated back into the product sheet for that product. And there it waits until the next set of questions or updates is requested.

Please note: companies can be both suppliers and customers in the system - configure your data models accordingly

# Follow up prompts

- prompt
    
    okay a couple of changes first of all in the side nav let's make it work as follows so we want the links to be dashboard which is fine and then companies as a main header and then the sub nav items would be our suppliers and our customers then the next main header link would be product sheets as you currently have it and the sub nav items would be suppliers products would be suppliers products and the second one would be our products and everything else would remain the same, I think.
    
- Great, now when you click on any row in the suppliers table, it takes you to the supplier detail page for that supplier. A mock-up of which I'm attaching.
    
    ![image.png](attachment:ab3df016-17dd-4fdc-86f8-35fa9183cdc0:image.png)
    
    - ok now the add new supplier button on the our suppliers page should be “invite new supplier” And this should initiate a modal with fields for the supplier name, the supplier email address and contact name, and space for a note and then all this should get emailed to the prospective supplier.
- Use this for the logo
    
    ![image.png](attachment:d2860160-6e72-4ed2-9300-7a9a56239837:image.png)
    
- For the question bank, can we make the default view a list view rather than the tile view that we have now? I think a list table is more conducive to this type of content. Secondly, we need to build out the question builder. So when you click the add question button, it brings up the question builder interface. A Create Question form that allows users to:
   - Enter a question prompt
   - Set whether the question is optional
   - Assign tags to the question
   - Select a question type (text, number, boolean, multiple choice, table)
   - Configure type-specific options (choices for multiple choice, columns for tables)
      - - table columns can also have different field types, for example column 1 could be type text, column 2 could be type dropdown, etc.
    - additionally, there can be “tables within tables” where, for exmaple, The main columns for the table could be product, amount, which would be a text and number field respectively. And then the next column could be materials. And you would have x number of rows for material 1, 2, and n. But they would all relate back to product 1, as in the attached screen shot.
        
        for the nested table, let me see if i can explain what we need. Let's say that the overall table is for the composition of a car and you have a column for a part name so you might have door, tire, mirror, light and then you have let's say a weight of material which would be a number obviously and then in the next column you might have something called subpart or sub material and for the door that might be plastic, metal, glass so you'd have a row for each of those in one column so in the sub parts column you'd have plastic and the next row you'd have metal and the next row you'd have glass and whatever related columns you need so for the next column you might have percentage weight the next column you might have country of origin and that might be the end of the nested table and at that point you'd continue with the regular table columns is this clear? It has been described as a BOM-like table.
    
    ![image.png](attachment:b36a5e79-6c91-4618-94ac-c49d09e8d4f5:image.png)
    
    We also need sections and subsections for the question builder/bank. So Section 1, subsection 1, question 7 would be 1.1.7 etc. 
    
- We need to be able to add new tags to the tags field in the create new question modal.
- Nothing is happening when I click the create tag button on the create new tag dialogue box. Nor does anything seem to be happening when I click the add tag button on the tags page. I get an adding new tag toast message but then nothing seems to happen.
- Let’s add a complete list of all the supplier product sheets for the current authenticated user. it will be a sort of sheet index, and the user will see it when he clicks on Suppliers’ Products link (note the change from Suppliers to Suppliers’) in the side nav.
    
    ![CleanShot 2025-03-24 at 10.26.02.png](attachment:eba525cc-00c9-454c-8ece-1a92dcfa2a50:CleanShot_2025-03-24_at_10.26.02.png)
    
- Restored to before this message after running and encountering apparently unfixable error:
    - ~~As with other tables, clicking in a row should take you to the detail view for the product sheet in that row. Additionally, we should add a column for tags associated with each sheet. And one of the actions should be request update. That should bring up a request update modal that allows you to request update on the sheet as it currently stands with whatever tag configuration it has, but also allows you to add additional tags, which would mean introducing additional questions to the sheet. Whichever action you take should trigger an email to the supplier, notifying them of whatever the request is.~~
- The request product sheet button on the supplier detail page should bring up a modal with a new sheet request content on it the same as the other locations for new sheet requests so the basics would be the supplier which should already be filled in because we're clicking the button on a particular suppliers detail page and then and then whichever products are in the system should be populated in a drop down a searchable drop down for the product name, a tag chooser, and there should be space for an optional note and I believe those are all the requirements
- Looks good. Of course we need to send an email notification to the supplier when this action has been taken.
- The next obvious addition is the sheet itself and the first instance we need to focus on is the supplier view of a sheet request. So this is basically the questionnaire that the supplier will receive when the customer fills out a sheet request form and includes one or more tags. Whichever tags are shown will determine the questions that appear on the sheet and if a question has more than one tag and the supplier has previously filled out the answer to that question because they received the previous tag then that answer will automatically be applied to the question and answer pair on this sheet request.
    
    ![CleanShot 2025-03-24 at 11.15.57.png](attachment:f24e6407-6d64-488a-961c-513875035afb:CleanShot_2025-03-24_at_11.15.57.png)
    
- Clarifying terminology prompt-versation
Me: let's get clear on terminology for this app: Please define:
- product sheet
- sheet request
are there any other terms that are ambiguous or redundant?
    
    ![](https://lovable.dev/img/lovable-logo.svg)
    
    ![](https://lovable.dev/img/lovable-logo.svg)
    
    **Lovable**
    
    13:13 on Mar 24, 2025
    
    Looking at your app, I'll clarify the terminology for you:
    
    ### **Product Sheet**
    
    A Product Sheet is a collection of information about a product, typically containing:
    
    - Product details (name, description)
    - Compliance information (tags/categories)
    - Questions and their answers
    - Status (draft, submitted, reviewing, approved, rejected)
    
    Product sheets are used to document and track product information, compliance data, and specifications between companies in a supply chain.
    
    ### **Sheet Request**
    
    A Sheet Request is when one company (typically a customer) asks a supplier to fill out information about a specific product. This creates a new product sheet that the supplier needs to complete by answering questions relevant to the tags/compliance categories selected.
    
    The workflow appears to be:
    
    1. Customer sends a sheet request to a supplier
    2. Supplier receives the request and fills out the questionnaire
    3. Customer reviews the completed sheet
    4. Sheet gets approved or rejected
    
    ### **Other potentially ambiguous terms:**
    
    1. **Tags vs. Compliance Categories**: These seem to be used interchangeably in the UI. They represent categories of regulatory or compliance requirements (like RoHS, REACH, etc.).
    2. **Section vs. Subsection**: Used for organizing questions in the sheet into logical groups and subgroups.
    3. **Company Role**: The application distinguishes between "supplier," "customer," and "both" roles, which determines what actions a company can take.
    4. **Questions vs. Question Bank**: Individual questions vs. the repository of all available questions that can be added to product sheets.
    
    The app appears to be a compliance management system focused on collecting, organizing, and verifying product information throughout a supply chain, with an emphasis on regulatory compliance tracking.
    
    Would you like me to further clarify any of these terms or identify any other potential ambiguities in the application?
    
    I am struck by your definition of sheet request, where you say a sheet request is when one company, typically a customer, asks a supplier to fill out information about a specific product. This creates a new product sheet that the supplier needs to complete by answering questions relevant to the tags compliance category selected. So that is not entirely true. And the new product sheet is what I think we need a different term for. So the product sheet is the sort of master document, the living record of the product that it represents. And it contains the entire history of sheet requests, tags, answers and responses, questions and responses that have ever been conducted on that product through this system. So I think that we need a new term for sheet request. What do you think?
    
    ![](https://lovable.dev/img/lovable-logo.svg)
    
    **Lovable**
    
    13:15 on Mar 24, 2025
    
    I see your point - there's a crucial distinction that needs to be clarified in the terminology. Based on your explanation, let me refine these definitions:
    
    ### **Product Sheet**
    
    A Product Sheet is the master document or living record for a specific product. It contains:
    
    - Core product information
    - The complete history of compliance questions and answers
    - All tags/compliance categories ever applied
    - A record of all request/response interactions related to this product
    
    It effectively serves as the single source of truth for a product's compliance information over time.
    
    ### **Alternative Term for "Sheet Request"**
    
    Since a "Sheet Request" is really just one interaction with the Product Sheet, we could consider these alternative terms:
    
    1. **Compliance Request**: Emphasizes the regulatory/compliance nature of the interaction
    2. **Product Information Request (PIR)**: Focuses on the information-gathering aspect
    3. **Supplier Questionnaire**: Highlights the Q&A format sent to suppliers
    4. **Compliance Verification Request**: Points to the verification purpose
    5. **Product Data Submission**: Focuses on the data collection aspect
    
    I think "**Compliance Request**" or "**Product Information Request**" might work well, as they clearly differentiate from the master "Product Sheet" while accurately describing what's happening - a request for specific information about a product's compliance status.
    
- TErminology:
    
    
    | **Current Term** | **Improved Term** | **Definition** |
    | --- | --- | --- |
    | Sheet Request | Product Information Request (PIR) | A specific instance when a company requests product compliance information from a supplier, creating a submission entry in the Product Sheet |
    | Product Sheet | Product Sheet | The master document containing all historical data about a product, including all PIRs, questions, answers, and compliance information over time |
    | Tags | Information Categories (Tags) | Regulatory or compliance frameworks that apply to a product (e.g., REACH, RoHS, TSCA) |
    | Supplier Sheet Request | Supplier Response Form | The interface where suppliers respond to a Product Information Request |
    | Status: "draft", "submitted", etc. | Request Status | The current state of a Product Information Request in its lifecycle |
    | Questions | Questions | Questions related to specific compliance requirements that need to be answered by suppliers |
    | Question Bank | Question Bank | The central library of all compliance questions that can be included in PIRs |
    | Section/Subsection | Section/Subsection | Organizational units for grouping related compliance questions |
    | Companies with role "supplier" | Supplier Companies | Companies that provide products and complete PIRs |
    | Companies with role "customer" | Customer Companies | Companies that request product information through PIRs |
    | Answer | Supplier Response | The data provided by a supplier in response to a compliance question |
    | Flag | Flag | A marker indicating a potential problem with a supplier's response |
    | Comment | Comment | Communication between parties regarding a specific answer |
- Next step: develop supplier response form, which should be a straight-up questionnaire with questions and answers (as well as sections and subsections) determined by the tags chosen in the PIR. Additionally, each question/answer pair should have a “thought bubble” icon next to it to drop down a “chat drawer” where suppliers can communicate directly with their customer requestors about the specific question at hand. 
The importance of tags in this context:
    
    How the system handles **questions with multiple tags** while **avoiding redundant answers**:
    
    ---
    
    **🔁 Avoiding Duplicate Answers for Multi-Tagged Questions**
    
    Let’s break it down step by step:
    
    ---
    
    **💡 The Scenario:**
    
    1.	A **question** in your system has **multiple tags**, e.g.:
    
    •	Question: “List all restricted substances in the product.”
    
    •	Tags: REACH, Prop 65, Chemical Composition
    
    2.	A **supplier** receives a **product information request** from **Customer A**, which includes only the REACH tag.
    
    •	The supplier **answers** the question.
    
    3.	Later, **Customer B** sends a different request for the **same product**, this time filtering by the Prop 65 tag.
    
    •	The system **recognizes** that this question was already answered for this product.
    
    ---
    
    **✅ What Happens Behind the Scenes:**
    
    •	The question is **stored once** in the database.
    
    •	Each **answer** is tied to:
    
    •	The **question ID**
    
    •	The **product**
    
    •	(Optional: the **supplier** or **customer**, if needed for visibility logic)
    
    •	When a new request is sent and includes a **question already answered** (even under a different tag), the system:
    
    1.	**Finds the existing answer**.
    
    2.	**Pre-fills it** into the new questionnaire.
    
    3.	Optionally **locks or marks it as “already answered”** (depending on UI design).
    
    4.	Gives the supplier a chance to **review or update** it if needed.
    
    ---
    
    **🔒 Why This Matters:**
    
    •	**Prevents duplication of work** for suppliers.
    
    •	**Maintains consistency** across product data.
    
    •	**Speeds up turnaround time** for compliance responses.
    
    •	**Supports modular, tag-based questionnaire deployment** without loss of data continuity.
    
- In point number two, you mentioned that you created a specialized question item component to handle different question types. Is this redundant to the work that we have already done in the question bank earlier?
    
    ![](https://lovable.dev/img/lovable-logo.svg)
    
    **Lovable**
    
    14:16 on Mar 24, 2025
    
    I'll analyze the existing QuestionItem component for the supplier response form against what's already in the question bank to check for redundancy.
    
    Looking at the code, I can see that:
    
    1. The QuestionBank.tsx page and related components allow users to create and manage questions of different types.
    2. The QuestionBuilderDialog.tsx component handles question creation/editing with different question types.
    3. The QuestionItem.tsx component in the supplierResponse folder is specialized for displaying questions and capturing answers from suppliers.
    
    The QuestionItem.tsx is not redundant because:
    
    - It handles the display and interaction for answering questions (rather than creating them)
    - It includes supplier-specific functionality like comments threads
    - It manages form controls for capturing responses
    - It connects to the product sheet's answer data structure
    
    The question bank components focus on question management and creation, while the QuestionItem component focuses on the response experience for suppliers. They serve different purposes in the application workflow.
    
    So while they both handle question types, they have distinct responsibilities - one for creation/management and one for collecting responses. This separation of concerns is appropriate for the application's architecture.
    
- Now it’s time to round out this workflow by adding the customer review step. I will remind you of the main flow presented in the original prompt:
We start with a question bank, which includes all the questions that could be asked for a given industry. So for example, the chemicals industry would have all the questions that chemicals industry suppliers need to report to their customers and to authorities. And each of those questions is tagged with one or more tags. So in this instance, the blue could be REACH, the red could be US EPA, etc. And when a manufacturer or a regulatory body or anyone wants to send a request for information about a given chemical product, they select the tag that contains the questions that they need to ask. So if they need to ask questions for reach, they'd select the blue tag in this case. And then they send that to the supplier company, who is notified via email that there is a product sheet request by [requesting company name] for [supplier company’s product name]. The supplier then fills out those filtered questions, those tagged questions. And when it's finished filling them out, it submits them back to the organization that sent the request in the first place, who receives an email notification indicating that there is a product sheet ready for review. And that organization then reviews it by flagging problematic answers and entering comments. And then resubmits it back to the supplier (who receives email notification) and then comments on those flags and either changes the answer or disagrees with the change. And this iterative review process goes back and forth until the requesting organization has approved all of the answers, at which point it's incorporated back into the product sheet for that product. And there it waits until the next set of questions or updates is requested.
with the associated schematic:
    
    ![image.png](attachment:12640caa-abbf-4cba-9d4f-70045bf77458:image.png)
    
    ![CleanShot 2025-03-24 at 14.44.23.png](attachment:e50cd2ea-6f47-48b0-80e4-c3e0634a2037:CleanShot_2025-03-24_at_14.44.23.png)
    
    are you clear on this flow? did i provide enough information? i'm also attaching mockups of the main review page for your reference. I can also provide the supplier review response form as well as the Round (1 + n) customer response to supplier response (Though I'm wondering if it's obvious how those should appear and I maybe shouldn't bias your interpretation of the presentation. I will say though that it's designed to greatly streamline the review process by filtering only those questions that have been flagged by the customer-reviewer. Of course this is in the case of a supplier responding to a customer review round or in the case of a customer reviewing a supplier response, the customer is similarly furnished with a filtered view of only those questions and answers that the supplier responded to in the current round. Is that all clear?
    
- One thing I forgot to ask for is that in the create product information request we need to have the ability to add a brand new product in cases where we need to request information on a product that's not already in the system. Please make that so.
    - It worked now, but we need to ensure that when a product information request is sent, that that request is listed in the product sheets list on the supplier detail page. Perhaps in a different color with a status of new sheet requested when it's a new sheet request or update requested when it's an existing product.
- Now it's time to build the R customers page, which should be very similar to the R suppliers page, with the primary difference being that task progress will be measured in terms of our company's responses to customer requests, rather than our suppliers responses to our requests. This can be handled later, but I would like task progress with those progress bars in the task progress column to be calculated by the number of outstanding, the number of answered questions over the number of outstanding questions asked by customers. But if that's too complicated right now, let's just build the basics of the page. Please let me know what you're going to do.
- I'm not clear on whether you finished or attempted to begin building out the supplier side of all of these views. Did you in fact do that? Because it's essential to the workflow and the ability to test the workflow. I'm referring to, for example, the Our Products page, which would be the products that we manufacture and/or sell in our role as supplier.
    - I've implemented the "Our Products" page that displays products your company manufactures or sells. The page includes a table showing your products with filtering capabilities and appropriate actions. I've also updated the necessary types and mock data to support this functionality.
- shouldn't Customer PIRs for our products show in the our products link page?

### **Can you give me a test flow with instructions on using the user switcher to test the main workflow?**

- **Test Flow Instructions**
    
    The user switcher in your application allows you to quickly switch between different user roles (Customer Admin, Supplier Admin, or a user with both roles) to test the complete workflow.
    
    ### **Step 1: Start as a Customer Admin**
    
    1. Click on the user switcher dropdown in the top-right corner
    2. Select "Customer Admin"
    3. Navigate to "Suppliers" from the sidebar
    4. Browse the list of suppliers and click on a supplier to view details
    5. In the supplier detail view, click "Request Product Information"
    6. Fill out the product information request form with:
        - Product name
        - Description
        - Select relevant information categories (tags)
        - Add questions as needed
    7. Submit the request - this will create a new PIR (Product Information Request)
    
    ### **Step 2: Switch to Supplier Admin**
    
    1. Click on the user switcher dropdown
    2. Select "Supplier Admin"
    3. Navigate to "Our Products" from the sidebar
    4. Check the "Customer PIRs" tab to see incoming requests
    5. Click "Review" on one of the customer requests
    6. Fill out the requested information for each question
    7. Add comments if needed
    8. Submit the response
    
    ### **Step 3: Switch back to Customer Admin**
    
    1. Click on the user switcher dropdown
    2. Select "Customer Admin"
    3. Navigate to "Product Sheets" from the sidebar
    4. Check the "Submitted" or "Reviewing" tabs
    5. Find the product sheet that was just responded to
    6. Click on it to review the supplier's responses
    7. Approve or reject responses as needed
    8. Add comments or flag items requiring further clarification
    
    ### **Step 4: Test Both Roles User**
    
    1. Click on the user switcher dropdown
    2. Select "Both Customer/Supplier"
    3. Notice how you now have access to both customer and supplier functions
    4. Test creating product information as a supplier
    5. Test requesting product information as a customer
    6. Observe how the workflow differs when you're both a customer and supplier
- Okay, it's working now, but there's a tremendous problem. And that is that you constructed this incorrectly, I think. As a supplier user, when I look at our products, I should not be presented with an option to review when there's a new request. I should be taken to the supplier response form so I can respond to the request and answer the questions.
- On the our products page, please make it so that when you click on a product, it takes you to the product sheet for that product.
- On the supplier response form, we need to link up the status with the actual status of the sheet of the form. So I'm looking at the response form for chemical product one. And saying the completion status is zero of two questions answered. And under general questions, I have not yet put answers. And there is a button at the bottom that says submit response, but the status at the top of the page reads status submitted. And it's highlighted in yellow. Please explain this discrepancy.
- When typing into a text field, the toast message for the saved response is coming up with every single keystroke. Please make it so that it's less intrusive for the user. Also after submitting a sheet, the user is taken to a page called product sheets, which is a grid of product sheets it looks like. However, this like other similar pages would be better rendered in a tabular form and the user should be able to click on any of these sheets just to go and then see the actual product sheet for that product.
- When answering questions in a supplier response form, the status changes to partially submitted when any answer is answered or any question is answered. In those cases the status would be better reflected by the term in progress rather than partially submitted because we need the official submission to happen only when the supplier clicks submit response which signals that they have gone through the entire form and are satisfied with their answers and are therefore officially submitting it.
- So the iterative review process is not quite right. When a customer reviews a supplier response form that has been through a previous round of review, the UI should only show open flagged issues. And the customer should have the opportunity or the ability to respond to the revised answer and to flag it for further review or approve it. Please fix.
- I'm concerned that when selecting different test users or particularly different test user types, so supplier on the one hand and customer admin on the other, that it's indicating that the project is not quite set up properly. When looking at R suppliers, for example, and clicking on the R suppliers link, we should only see companies with the relationship of supplier to the current authenticated user's company. And that logic should cascade throughout the whole application. Is that how things are currently set up? And it will work properly when we set up the back end and superbase. Please reassure me.
- I'm concerned that when selecting different test users or particularly different test user types, so supplier on the one hand and customer admin on the other, that it's indicating that the project is not quite set up properly. When looking at R suppliers, for example, and clicking on the R suppliers link, we should only see companies with the relationship of supplier to the current authenticated user's company. And that logic should cascade throughout the whole application. Is that how things are currently set up? And it will work properly when we set up the back end and superbase. Please reassure me.
Response:
    
    I understand your concern about how the application will handle different user roles (supplier vs customer) when it's connected to a proper backend. Let me explain how the current setup works and what would need to be adjusted.
    
    Currently, the app is using a mock data system with local storage for demonstration purposes. The filtering logic for suppliers in the Suppliers page is quite simple - it shows all companies with role "supplier" or "both", without considering the relationship to the current user's company.
    
    Let's examine how this is implemented in the Suppliers page:
    
    ```tsx
    const Suppliers = () => {
      const { companies, addCompany } = useApp();
      // ...
    
      const suppliers = companies.filter(
        (company) => company.role === "supplier" || company.role === "both"
      );
    
      // ...
    };
    
    ```
    
    This is a simplified implementation that doesn't take into account the relationship between companies, which would be crucial in a real-world scenario.
    
    When you integrate with Supabase (or another backend), you'll need to implement proper relationship filtering. Here's how it would work:
    
    1. Companies would have relationship records in the database (e.g., a "company_relationships" table)
    2. When a user logs in, you'd fetch only suppliers related to their company
    3. The UI would then display only those related suppliers
    
    This relational filtering would cascade through the entire application - product sheets, reviews, etc. would all be filtered based on the authenticated user's company relationships.
    
    Rest assured, the current structure is designed to be easily extended when you connect to Supabase. The AppContext is already set up to be replaced with real API calls, and the UI components are built to display whatever data they receive.
    
    When implementing the backend, you would:
    
    1. Replace mock data with real database queries
    2. Add proper relationship filtering to all data fetches
    3. Implement proper access control via Row Level Security in Supabase
    
    Based on your concerns about the user roles and company relationships, it would be better to refine the functionality and workflows first before implementing the backend. Here's why:
    
    1. The current implementation doesn't properly handle the relationship between companies (supplier vs customer)
    2. You've noticed issues with how different user types should see filtered data
    3. The iterative review process had issues that needed fixing
    
    It's generally easier and more efficient to get the frontend workflows and user experiences right first, and then implement the backend to support those workflows. This approach prevents having to make significant changes to both layers simultaneously.
    
    Some things I would recommend addressing before moving to the backend:
    
    1. Properly implement user role-based views (what suppliers vs customers should see)
    2. Refine the supplier-customer relationship model in the frontend
    3. Complete any remaining workflow improvements like the review process
- On the create product information request modal, the select a product dropdown should only show products from the selected company. If you have initiated the product information request process from a supplier detail page for a specific company
- For any question type with options such as multiple choice, we need the ability to bulk import and/or bulk paste the choices. For example, in a multiple choice question, I should be able to copy a column of cells from Excel and paste those into the options, add an options field and have them appear as different individual options for the answer.
- can we have a way to preview what a question will look like to the recipient?
- Okay let’s start with authentication