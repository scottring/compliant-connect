// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
// Removed import for non-existent env file

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Initialize Supabase client with custom settings
export const supabase = createClient<Database>(
  // Access environment variables directly via import.meta.env
  // Ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are defined in your .env files
  import.meta.env.VITE_SUPABASE_URL as string,
  import.meta.env.VITE_SUPABASE_ANON_KEY as string,
  {
    auth: {
      persistSession: true, // Enable session persistence
      autoRefreshToken: true, // Automatically refresh token
      detectSessionInUrl: true, // Detect auth tokens in URL
      storage: localStorage, // Explicitly use localStorage
    },
    global: {
      // Add custom headers if needed
      headers: {
        'x-client-info': '@stacksdata/compliance-platform'
      },
    },
    realtime: {
      // Disable realtime subscriptions if not needed
      params: {
        eventsPerSecond: 10,
      },
    },
    db: {
      schema: 'public',
    },
  }
);

// Verify session on load
supabase.auth.getSession().then(({ data: { session } }) => { // Destructure session correctly
  if (session) { // Check if session exists
    console.log('Supabase session found on load:', {
      user: session.user.email, // Use session.user
      expires_at: session.expires_at ? new Date(session.expires_at * 1000).toISOString() : 'N/A' // Use session.expires_at
    });
  } else {
    console.log('No Supabase session found on load');
  }
}).catch(err => {
  console.error('Error checking Supabase session:', err);
});

// Log Supabase initialization for debugging
if (import.meta.env.MODE === 'development') { // Use import.meta.env.MODE
  console.log(`Supabase client initialized for ${import.meta.env.MODE} environment`, {
    url: import.meta.env.VITE_SUPABASE_URL,
    anon_key_prefix: import.meta.env.VITE_SUPABASE_ANON_KEY?.substring(0, 5) + '...' // Add optional chaining
  });
}